// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { RJSFSchema, RegistryWidgetsType, UiSchema } from "@rjsf/utils";
import React from "react";
import { ContractAddress } from "@concordium/web-sdk";
import { default as client } from "./euroeStablecoin";
import * as types from "./euroeStablecoin";
import {
	GenericInit,
	GenericInvoke,
	GenericUpdate,
} from "../GenericContractUI";
export const balanceOfRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			token_id: {
				type: "string",
				title: "Token Id",
				default: "",
				format: "byte",
			},
			address: {
				type: "object",
				title: "Address",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Balance Of Request",
};
export type BalanceOfRequestUi = {
	token_id: string;
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const balanceOfResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "string", title: "" },
	title: "Balance Of Response",
};
export type BalanceOfResponseUi = string[];
export const balanceOfErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Balance Of Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type BalanceOfErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const blockRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Block Request",
	properties: {
		address_to_block: {
			type: "object",
			title: "Address To Block",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type BlockRequestUi = {
	address_to_block:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
};
export const blockErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Block Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type BlockErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const burnRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Burn Request",
	properties: {
		amount: { type: "string", title: "Amount" },
		burnaddress: {
			type: "object",
			title: "Burnaddress",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type BurnRequestUi = {
	amount: string;
	burnaddress:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
};
export const burnErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Burn Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type BurnErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const grantRoleRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Grant Role Request",
	properties: {
		mintrole: {
			type: "object",
			title: "Mintrole",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		burnrole: {
			type: "object",
			title: "Burnrole",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		blockrole: {
			type: "object",
			title: "Blockrole",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		pauserole: {
			type: "object",
			title: "Pauserole",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		adminrole: {
			type: "object",
			title: "Adminrole",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type GrantRoleRequestUi = {
	mintrole:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	burnrole:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	blockrole:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	pauserole:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	adminrole:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
};
export const grantRoleErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Grant Role Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type GrantRoleErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const mintRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Mint Request",
	properties: {
		owner: {
			type: "object",
			title: "Owner",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		amount: { type: "string", title: "Amount" },
	},
};
export type MintRequestUi = {
	owner:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	amount: string;
};
export const mintErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Mint Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type MintErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const operatorOfRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			owner: {
				type: "object",
				title: "Owner",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
			address: {
				type: "object",
				title: "Address",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Operator Of Request",
};
export type OperatorOfRequestUi = {
	owner:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const operatorOfResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "boolean", title: "" },
	title: "Operator Of Response",
};
export type OperatorOfResponseUi = boolean[];
export const operatorOfErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Operator Of Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type OperatorOfErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const permitRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Permit Request",
	properties: {
		signature: {
			type: "array",
			items: [
				{ type: "integer", minimum: 0, maximum: 255, title: "Key" },
				{
					type: "array",
					items: [
						{ type: "integer", minimum: 0, maximum: 255, title: "Key" },
						{
							type: "object",
							title: "Value",
							properties: { tag: { type: "string", enum: ["Ed25519"] } },
							required: ["tag"],
							dependencies: {
								tag: {
									oneOf: [
										{
											properties: {
												tag: { enum: ["Ed25519"] },
												Ed25519: {
													type: "array",
													items: {
														type: "string",
														title: "",
														default: "",
														format: "byte",
													},
												},
											},
										},
									],
								},
							},
						},
					],
					title: "Value",
				},
			],
			title: "Signature",
		},
		signer: { type: "string", title: "Signer" },
		message: {
			type: "object",
			title: "Message",
			properties: {
				contract_address: {
					type: "object",
					title: "Contract Address",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				nonce: { type: "integer", minimum: 0, title: "Nonce" },
				timestamp: { type: "string", format: "date-time", title: "Timestamp" },
				entry_point: { type: "string", title: "Entry Point", default: "" },
				payload: {
					type: "array",
					items: { type: "integer", minimum: 0, maximum: 255, title: "" },
					title: "Payload",
				},
			},
		},
	},
};
export type PermitRequestUi = {
	signature: [number, [number, { tag: "Ed25519"; Ed25519: [string] }][]][];
	signer: string;
	message: {
		contract_address: { index: number; subindex: number };
		nonce: number;
		timestamp: string;
		entry_point: string;
		payload: number[];
	};
};
export const removeRoleRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Role Request",
	properties: {
		mintrole: {
			type: "object",
			title: "Mintrole",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		burnrole: {
			type: "object",
			title: "Burnrole",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		blockrole: {
			type: "object",
			title: "Blockrole",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		pauserole: {
			type: "object",
			title: "Pauserole",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		adminrole: {
			type: "object",
			title: "Adminrole",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type RemoveRoleRequestUi = {
	mintrole:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	burnrole:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	blockrole:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	pauserole:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	adminrole:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
};
export const removeRoleErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Role Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type RemoveRoleErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const setImplementorsRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Set Implementors Request",
	properties: {
		id: { type: "string", title: "Id", default: "" },
		implementors: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					index: { type: "integer", minimum: 0 },
					subindex: { type: "integer", minimum: 0 },
				},
			},
			title: "Implementors",
		},
	},
};
export type SetImplementorsRequestUi = {
	id: string;
	implementors: { index: number; subindex: number }[];
};
export const setImplementorsErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Set Implementors Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type SetImplementorsErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const setPausedRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Set Paused Request",
	properties: { paused: { type: "boolean", title: "Paused" } },
};
export type SetPausedRequestUi = { paused: boolean };
export const setPausedErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Set Paused Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type SetPausedErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const supportsRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "string", title: "", default: "" },
	title: "Supports Request",
};
export type SupportsRequestUi = string[];
export const supportsResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			tag: { type: "string", enum: ["NoSupport", "Support", "SupportBy"] },
		},
		required: ["tag"],
		dependencies: {
			tag: {
				oneOf: [
					{
						properties: {
							tag: { enum: ["NoSupport"] },
							NoSupport: { type: "object", title: "NoSupport", properties: {} },
						},
					},
					{
						properties: {
							tag: { enum: ["Support"] },
							Support: { type: "object", title: "Support", properties: {} },
						},
					},
					{
						properties: {
							tag: { enum: ["SupportBy"] },
							SupportBy: {
								type: "array",
								items: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
									title: "",
								},
							},
						},
					},
				],
			},
		},
	},
	title: "Supports Response",
};
export type SupportsResponseUi =
	| { tag: "NoSupport"; NoSupport: never }
	| { tag: "Support"; Support: never }
	| { tag: "SupportBy"; SupportBy: [{ index: number; subindex: number }[]] }[];
export const supportsErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Supports Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type SupportsErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const supportsPermitRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Supports Permit Request",
	properties: {
		queries: {
			type: "array",
			items: { type: "string", title: "", default: "" },
			title: "Queries",
		},
	},
};
export type SupportsPermitRequestUi = { queries: string[] };
export const supportsPermitResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			tag: { type: "string", enum: ["NoSupport", "Support", "SupportBy"] },
		},
		required: ["tag"],
		dependencies: {
			tag: {
				oneOf: [
					{
						properties: {
							tag: { enum: ["NoSupport"] },
							NoSupport: { type: "object", title: "NoSupport", properties: {} },
						},
					},
					{
						properties: {
							tag: { enum: ["Support"] },
							Support: { type: "object", title: "Support", properties: {} },
						},
					},
					{
						properties: {
							tag: { enum: ["SupportBy"] },
							SupportBy: {
								type: "array",
								items: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
									title: "",
								},
							},
						},
					},
				],
			},
		},
	},
	title: "Supports Permit Response",
};
export type SupportsPermitResponseUi =
	| { tag: "NoSupport"; NoSupport: never }
	| { tag: "Support"; Support: never }
	| { tag: "SupportBy"; SupportBy: [{ index: number; subindex: number }[]] }[];
export const supportsPermitErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Supports Permit Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type SupportsPermitErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const tokenMetadataRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "string", title: "", default: "", format: "byte" },
	title: "Token Metadata Request",
};
export type TokenMetadataRequestUi = string[];
export const tokenMetadataResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			url: { type: "string", title: "Url", default: "" },
			hash: {
				type: "object",
				title: "Hash",
				properties: { tag: { type: "string", enum: ["None", "Some"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["None"] },
									None: { type: "object", title: "None", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["Some"] },
									Some: {
										type: "array",
										items: {
											type: "string",
											title: "",
											default: "",
											format: "byte",
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Token Metadata Response",
};
export type TokenMetadataResponseUi = {
	url: string;
	hash: { tag: "None"; None: never } | { tag: "Some"; Some: [string] };
}[];
export const tokenMetadataErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Token Metadata Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type TokenMetadataErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const transferRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			token_id: {
				type: "string",
				title: "Token Id",
				default: "",
				format: "byte",
			},
			amount: { type: "string", title: "Amount" },
			from: {
				type: "object",
				title: "From",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
			to: {
				type: "object",
				title: "To",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: [
											{
												type: "object",
												title: "",
												properties: {
													index: { type: "integer", minimum: 0 },
													subindex: { type: "integer", minimum: 0 },
												},
											},
											{ type: "string", title: "", default: "" },
										],
									},
								},
							},
						],
					},
				},
			},
			data: { type: "string", title: "Data", default: "", format: "byte" },
		},
	},
	title: "Transfer Request",
};
export type TransferRequestUi = {
	token_id: string;
	amount: string;
	from:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	to:
		| { tag: "Account"; Account: [string] }
		| {
				tag: "Contract";
				Contract: [{ index: number; subindex: number }, string];
		  };
	data: string;
}[];
export const transferErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Transfer Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type TransferErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const unblockRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Unblock Request",
	properties: {
		address_to_unblock: {
			type: "object",
			title: "Address To Unblock",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type UnblockRequestUi = {
	address_to_unblock:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
};
export const unblockErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Unblock Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type UnblockErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const updateOperatorRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			update: {
				type: "object",
				title: "Update",
				properties: { tag: { type: "string", enum: ["Remove", "Add"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Remove"] },
									Remove: { type: "object", title: "Remove", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["Add"] },
									Add: { type: "object", title: "Add", properties: {} },
								},
							},
						],
					},
				},
			},
			operator: {
				type: "object",
				title: "Operator",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Update Operator Request",
};
export type UpdateOperatorRequestUi = {
	update: { tag: "Remove"; Remove: never } | { tag: "Add"; Add: never };
	operator:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const updateOperatorErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Update Operator Error",
	properties: {
		tag: {
			type: "string",
			enum: ["InvalidTokenId", "InsufficientFunds", "Unauthorized", "Custom"],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Custom"] },
						Custom: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: {
										type: "string",
										enum: [
											"ParseParams",
											"LogFull",
											"LogMalformed",
											"InvalidContractName",
											"ContractOnly",
											"InvokeContractError",
											"TokenAlreadyMinted",
											"MaxSupplyReached",
											"NoBalanceToBurn",
											"ContractPaused",
											"AddressBlocklisted",
											"FailedUpgradeMissingModule",
											"FailedUpgradeMissingContract",
											"FailedUpgradeUnsupportedModuleVersion",
											"MissingAccount",
											"MalformedData",
											"WrongSignature",
											"NonceMismatch",
											"WrongContract",
											"WrongEntryPoint",
											"Expired",
										],
									},
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["ParseParams"] },
													ParseParams: {
														type: "object",
														title: "ParseParams",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogFull"] },
													LogFull: {
														type: "object",
														title: "LogFull",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["LogMalformed"] },
													LogMalformed: {
														type: "object",
														title: "LogMalformed",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvalidContractName"] },
													InvalidContractName: {
														type: "object",
														title: "InvalidContractName",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractOnly"] },
													ContractOnly: {
														type: "object",
														title: "ContractOnly",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["InvokeContractError"] },
													InvokeContractError: {
														type: "object",
														title: "InvokeContractError",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["TokenAlreadyMinted"] },
													TokenAlreadyMinted: {
														type: "object",
														title: "TokenAlreadyMinted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MaxSupplyReached"] },
													MaxSupplyReached: {
														type: "object",
														title: "MaxSupplyReached",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NoBalanceToBurn"] },
													NoBalanceToBurn: {
														type: "object",
														title: "NoBalanceToBurn",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["ContractPaused"] },
													ContractPaused: {
														type: "object",
														title: "ContractPaused",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["AddressBlocklisted"] },
													AddressBlocklisted: {
														type: "object",
														title: "AddressBlocklisted",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingModule"] },
													FailedUpgradeMissingModule: {
														type: "object",
														title: "FailedUpgradeMissingModule",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["FailedUpgradeMissingContract"] },
													FailedUpgradeMissingContract: {
														type: "object",
														title: "FailedUpgradeMissingContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: {
														enum: ["FailedUpgradeUnsupportedModuleVersion"],
													},
													FailedUpgradeUnsupportedModuleVersion: {
														type: "object",
														title: "FailedUpgradeUnsupportedModuleVersion",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MissingAccount"] },
													MissingAccount: {
														type: "object",
														title: "MissingAccount",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["MalformedData"] },
													MalformedData: {
														type: "object",
														title: "MalformedData",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongSignature"] },
													WrongSignature: {
														type: "object",
														title: "WrongSignature",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["NonceMismatch"] },
													NonceMismatch: {
														type: "object",
														title: "NonceMismatch",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongContract"] },
													WrongContract: {
														type: "object",
														title: "WrongContract",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["WrongEntryPoint"] },
													WrongEntryPoint: {
														type: "object",
														title: "WrongEntryPoint",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Expired"] },
													Expired: {
														type: "object",
														title: "Expired",
														properties: {},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type UpdateOperatorErrorUi =
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| {
			tag: "Custom";
			Custom: [
				| { tag: "ParseParams"; ParseParams: never }
				| { tag: "LogFull"; LogFull: never }
				| { tag: "LogMalformed"; LogMalformed: never }
				| { tag: "InvalidContractName"; InvalidContractName: never }
				| { tag: "ContractOnly"; ContractOnly: never }
				| { tag: "InvokeContractError"; InvokeContractError: never }
				| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
				| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
				| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
				| { tag: "ContractPaused"; ContractPaused: never }
				| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
				| {
						tag: "FailedUpgradeMissingModule";
						FailedUpgradeMissingModule: never;
				  }
				| {
						tag: "FailedUpgradeMissingContract";
						FailedUpgradeMissingContract: never;
				  }
				| {
						tag: "FailedUpgradeUnsupportedModuleVersion";
						FailedUpgradeUnsupportedModuleVersion: never;
				  }
				| { tag: "MissingAccount"; MissingAccount: never }
				| { tag: "MalformedData"; MalformedData: never }
				| { tag: "WrongSignature"; WrongSignature: never }
				| { tag: "NonceMismatch"; NonceMismatch: never }
				| { tag: "WrongContract"; WrongContract: never }
				| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
				| { tag: "Expired"; Expired: never },
			];
	  };
export const upgradeRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Upgrade Request",
	properties: {
		module: { type: "string", title: "Module", default: "", format: "byte" },
		migrate: {
			type: "object",
			title: "Migrate",
			properties: { tag: { type: "string", enum: ["None", "Some"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["None"] },
								None: { type: "object", title: "None", properties: {} },
							},
						},
						{
							properties: {
								tag: { enum: ["Some"] },
								Some: {
									type: "array",
									items: {
										type: "array",
										items: [
											{ type: "string", title: "First", default: "" },
											{
												type: "string",
												title: "Second",
												default: "",
												format: "byte",
											},
										],
										title: "",
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type UpgradeRequestUi = {
	module: string;
	migrate:
		| { tag: "None"; None: never }
		| { tag: "Some"; Some: [[string, string]] };
};
export const upgradeErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Upgrade Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseParams",
				"LogFull",
				"LogMalformed",
				"InvalidContractName",
				"ContractOnly",
				"InvokeContractError",
				"TokenAlreadyMinted",
				"MaxSupplyReached",
				"NoBalanceToBurn",
				"ContractPaused",
				"AddressBlocklisted",
				"FailedUpgradeMissingModule",
				"FailedUpgradeMissingContract",
				"FailedUpgradeUnsupportedModuleVersion",
				"MissingAccount",
				"MalformedData",
				"WrongSignature",
				"NonceMismatch",
				"WrongContract",
				"WrongEntryPoint",
				"Expired",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseParams"] },
						ParseParams: {
							type: "object",
							title: "ParseParams",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["LogFull"] },
						LogFull: { type: "object", title: "LogFull", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogMalformed"] },
						LogMalformed: {
							type: "object",
							title: "LogMalformed",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractName"] },
						InvalidContractName: {
							type: "object",
							title: "InvalidContractName",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["ContractOnly"] },
						ContractOnly: {
							type: "object",
							title: "ContractOnly",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvokeContractError"] },
						InvokeContractError: {
							type: "object",
							title: "InvokeContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TokenAlreadyMinted"] },
						TokenAlreadyMinted: {
							type: "object",
							title: "TokenAlreadyMinted",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["MaxSupplyReached"] },
						MaxSupplyReached: {
							type: "object",
							title: "MaxSupplyReached",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["NoBalanceToBurn"] },
						NoBalanceToBurn: {
							type: "object",
							title: "NoBalanceToBurn",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["ContractPaused"] },
						ContractPaused: {
							type: "object",
							title: "ContractPaused",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["AddressBlocklisted"] },
						AddressBlocklisted: {
							type: "object",
							title: "AddressBlocklisted",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["FailedUpgradeMissingModule"] },
						FailedUpgradeMissingModule: {
							type: "object",
							title: "FailedUpgradeMissingModule",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["FailedUpgradeMissingContract"] },
						FailedUpgradeMissingContract: {
							type: "object",
							title: "FailedUpgradeMissingContract",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["FailedUpgradeUnsupportedModuleVersion"] },
						FailedUpgradeUnsupportedModuleVersion: {
							type: "object",
							title: "FailedUpgradeUnsupportedModuleVersion",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["MissingAccount"] },
						MissingAccount: {
							type: "object",
							title: "MissingAccount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["MalformedData"] },
						MalformedData: {
							type: "object",
							title: "MalformedData",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["WrongSignature"] },
						WrongSignature: {
							type: "object",
							title: "WrongSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["NonceMismatch"] },
						NonceMismatch: {
							type: "object",
							title: "NonceMismatch",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["WrongContract"] },
						WrongContract: {
							type: "object",
							title: "WrongContract",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["WrongEntryPoint"] },
						WrongEntryPoint: {
							type: "object",
							title: "WrongEntryPoint",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Expired"] },
						Expired: { type: "object", title: "Expired", properties: {} },
					},
				},
			],
		},
	},
};
export type UpgradeErrorUi =
	| { tag: "ParseParams"; ParseParams: never }
	| { tag: "LogFull"; LogFull: never }
	| { tag: "LogMalformed"; LogMalformed: never }
	| { tag: "InvalidContractName"; InvalidContractName: never }
	| { tag: "ContractOnly"; ContractOnly: never }
	| { tag: "InvokeContractError"; InvokeContractError: never }
	| { tag: "TokenAlreadyMinted"; TokenAlreadyMinted: never }
	| { tag: "MaxSupplyReached"; MaxSupplyReached: never }
	| { tag: "NoBalanceToBurn"; NoBalanceToBurn: never }
	| { tag: "ContractPaused"; ContractPaused: never }
	| { tag: "AddressBlocklisted"; AddressBlocklisted: never }
	| { tag: "FailedUpgradeMissingModule"; FailedUpgradeMissingModule: never }
	| { tag: "FailedUpgradeMissingContract"; FailedUpgradeMissingContract: never }
	| {
			tag: "FailedUpgradeUnsupportedModuleVersion";
			FailedUpgradeUnsupportedModuleVersion: never;
	  }
	| { tag: "MissingAccount"; MissingAccount: never }
	| { tag: "MalformedData"; MalformedData: never }
	| { tag: "WrongSignature"; WrongSignature: never }
	| { tag: "NonceMismatch"; NonceMismatch: never }
	| { tag: "WrongContract"; WrongContract: never }
	| { tag: "WrongEntryPoint"; WrongEntryPoint: never }
	| { tag: "Expired"; Expired: never };
export const viewResponseJsonSchema: RJSFSchema = {
	type: "object",
	title: "View Response",
	properties: {
		state: {
			type: "array",
			items: {
				type: "array",
				items: [
					{
						type: "object",
						title: "First",
						properties: {
							tag: { type: "string", enum: ["Account", "Contract"] },
						},
						required: ["tag"],
						dependencies: {
							tag: {
								oneOf: [
									{
										properties: {
											tag: { enum: ["Account"] },
											Account: {
												type: "array",
												items: { type: "string", title: "" },
											},
										},
									},
									{
										properties: {
											tag: { enum: ["Contract"] },
											Contract: {
												type: "array",
												items: {
													type: "object",
													title: "",
													properties: {
														index: { type: "integer", minimum: 0 },
														subindex: { type: "integer", minimum: 0 },
													},
												},
											},
										},
									},
								],
							},
						},
					},
					{
						type: "object",
						title: "Second",
						properties: {
							balances: {
								type: "array",
								items: {
									type: "array",
									items: [
										{
											type: "string",
											title: "First",
											default: "",
											format: "byte",
										},
										{ type: "string", title: "Second" },
									],
									title: "",
								},
								title: "Balances",
							},
							operators: {
								type: "array",
								items: {
									type: "object",
									title: "",
									properties: {
										tag: { type: "string", enum: ["Account", "Contract"] },
									},
									required: ["tag"],
									dependencies: {
										tag: {
											oneOf: [
												{
													properties: {
														tag: { enum: ["Account"] },
														Account: {
															type: "array",
															items: { type: "string", title: "" },
														},
													},
												},
												{
													properties: {
														tag: { enum: ["Contract"] },
														Contract: {
															type: "array",
															items: {
																type: "object",
																title: "",
																properties: {
																	index: { type: "integer", minimum: 0 },
																	subindex: { type: "integer", minimum: 0 },
																},
															},
														},
													},
												},
											],
										},
									},
								},
								title: "Operators",
							},
						},
					},
				],
				title: "",
			},
			title: "State",
		},
	},
};
export type ViewResponseUi = {
	state: [
		(
			| { tag: "Account"; Account: [string] }
			| { tag: "Contract"; Contract: [{ index: number; subindex: number }] }
		),
		{
			balances: [string, string][];
			operators:
				| { tag: "Account"; Account: [string] }
				| {
						tag: "Contract";
						Contract: [{ index: number; subindex: number }];
				  }[];
		},
	][];
};
export const viewMessageHashRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "View Message Hash Request",
	properties: {
		signature: {
			type: "array",
			items: [
				{ type: "integer", minimum: 0, maximum: 255, title: "Key" },
				{
					type: "array",
					items: [
						{ type: "integer", minimum: 0, maximum: 255, title: "Key" },
						{
							type: "object",
							title: "Value",
							properties: { tag: { type: "string", enum: ["Ed25519"] } },
							required: ["tag"],
							dependencies: {
								tag: {
									oneOf: [
										{
											properties: {
												tag: { enum: ["Ed25519"] },
												Ed25519: {
													type: "array",
													items: {
														type: "string",
														title: "",
														default: "",
														format: "byte",
													},
												},
											},
										},
									],
								},
							},
						},
					],
					title: "Value",
				},
			],
			title: "Signature",
		},
		signer: { type: "string", title: "Signer" },
		message: {
			type: "object",
			title: "Message",
			properties: {
				contract_address: {
					type: "object",
					title: "Contract Address",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				nonce: { type: "integer", minimum: 0, title: "Nonce" },
				timestamp: { type: "string", format: "date-time", title: "Timestamp" },
				entry_point: { type: "string", title: "Entry Point", default: "" },
				payload: {
					type: "array",
					items: { type: "integer", minimum: 0, maximum: 255, title: "" },
					title: "Payload",
				},
			},
		},
	},
};
export type ViewMessageHashRequestUi = {
	signature: [number, [number, { tag: "Ed25519"; Ed25519: [string] }][]][];
	signer: string;
	message: {
		contract_address: { index: number; subindex: number };
		nonce: number;
		timestamp: string;
		entry_point: string;
		payload: number[];
	};
};
export const viewMessageHashResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "integer", minimum: 0, maximum: 255, title: "" },
	title: "View Message Hash Response",
};
export type ViewMessageHashResponseUi = number[];
export const viewSupplyResponseJsonSchema: RJSFSchema = {
	type: "object",
	title: "View Supply Response",
	properties: {
		circulating_supply: { type: "string", title: "Circulating Supply" },
	},
};
export type ViewSupplyResponseUi = { circulating_supply: string };
export const init = (props: {
	onInitialize: (contract: ContractAddress.Type) => void;
	uiSchema?: UiSchema;
	uiWidgets?: RegistryWidgetsType;
}) =>
	GenericInit<never, never>({
		onContractInitialized: props.onInitialize,
		uiSchema: props.uiSchema,
		uiWidgets: props.uiWidgets,
		method: client.init,
	});
export const ENTRYPOINTS_UI: {
	[key: keyof typeof types.ENTRYPOINTS]: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) => React.JSX.Element;
} = {
	balanceOf: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.BalanceOfRequest,
			BalanceOfRequestUi,
			types.BalanceOfResponse,
			BalanceOfResponseUi,
			types.BalanceOfError,
			BalanceOfErrorUi
		>({
			...props,
			method: client.balanceOf,
			requestJsonSchema: balanceOfRequestJsonSchema,
			requestSchemaBase64: types.balanceOfRequestSchemaBase64,
			responseJsonSchema: balanceOfResponseJsonSchema,
			responseSchemaBase64: types.balanceOfResponseSchemaBase64,
			errorJsonSchema: balanceOfErrorJsonSchema,
			errorSchemaBase64: types.balanceOfErrorSchemaBase64,
		}),
	block: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.BlockRequest,
			BlockRequestUi,
			types.BlockError,
			BlockErrorUi
		>({
			...props,
			method: client.block,
			requestJsonSchema: blockRequestJsonSchema,
			requestSchemaBase64: types.blockRequestSchemaBase64,
			errorJsonSchema: blockErrorJsonSchema,
			errorSchemaBase64: types.blockErrorSchemaBase64,
		}),
	burn: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.BurnRequest,
			BurnRequestUi,
			types.BurnError,
			BurnErrorUi
		>({
			...props,
			method: client.burn,
			requestJsonSchema: burnRequestJsonSchema,
			requestSchemaBase64: types.burnRequestSchemaBase64,
			errorJsonSchema: burnErrorJsonSchema,
			errorSchemaBase64: types.burnErrorSchemaBase64,
		}),
	grantRole: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.GrantRoleRequest,
			GrantRoleRequestUi,
			types.GrantRoleError,
			GrantRoleErrorUi
		>({
			...props,
			method: client.grantRole,
			requestJsonSchema: grantRoleRequestJsonSchema,
			requestSchemaBase64: types.grantRoleRequestSchemaBase64,
			errorJsonSchema: grantRoleErrorJsonSchema,
			errorSchemaBase64: types.grantRoleErrorSchemaBase64,
		}),
	mint: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.MintRequest,
			MintRequestUi,
			types.MintError,
			MintErrorUi
		>({
			...props,
			method: client.mint,
			requestJsonSchema: mintRequestJsonSchema,
			requestSchemaBase64: types.mintRequestSchemaBase64,
			errorJsonSchema: mintErrorJsonSchema,
			errorSchemaBase64: types.mintErrorSchemaBase64,
		}),
	operatorOf: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.OperatorOfRequest,
			OperatorOfRequestUi,
			types.OperatorOfResponse,
			OperatorOfResponseUi,
			types.OperatorOfError,
			OperatorOfErrorUi
		>({
			...props,
			method: client.operatorOf,
			requestJsonSchema: operatorOfRequestJsonSchema,
			requestSchemaBase64: types.operatorOfRequestSchemaBase64,
			responseJsonSchema: operatorOfResponseJsonSchema,
			responseSchemaBase64: types.operatorOfResponseSchemaBase64,
			errorJsonSchema: operatorOfErrorJsonSchema,
			errorSchemaBase64: types.operatorOfErrorSchemaBase64,
		}),
	permit: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.PermitRequest, PermitRequestUi, never, never>({
			...props,
			method: client.permit,
			requestJsonSchema: permitRequestJsonSchema,
			requestSchemaBase64: types.permitRequestSchemaBase64,
		}),
	removeRole: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.RemoveRoleRequest,
			RemoveRoleRequestUi,
			types.RemoveRoleError,
			RemoveRoleErrorUi
		>({
			...props,
			method: client.removeRole,
			requestJsonSchema: removeRoleRequestJsonSchema,
			requestSchemaBase64: types.removeRoleRequestSchemaBase64,
			errorJsonSchema: removeRoleErrorJsonSchema,
			errorSchemaBase64: types.removeRoleErrorSchemaBase64,
		}),
	setImplementors: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.SetImplementorsRequest,
			SetImplementorsRequestUi,
			types.SetImplementorsError,
			SetImplementorsErrorUi
		>({
			...props,
			method: client.setImplementors,
			requestJsonSchema: setImplementorsRequestJsonSchema,
			requestSchemaBase64: types.setImplementorsRequestSchemaBase64,
			errorJsonSchema: setImplementorsErrorJsonSchema,
			errorSchemaBase64: types.setImplementorsErrorSchemaBase64,
		}),
	setPaused: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.SetPausedRequest,
			SetPausedRequestUi,
			types.SetPausedError,
			SetPausedErrorUi
		>({
			...props,
			method: client.setPaused,
			requestJsonSchema: setPausedRequestJsonSchema,
			requestSchemaBase64: types.setPausedRequestSchemaBase64,
			errorJsonSchema: setPausedErrorJsonSchema,
			errorSchemaBase64: types.setPausedErrorSchemaBase64,
		}),
	supports: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.SupportsRequest,
			SupportsRequestUi,
			types.SupportsResponse,
			SupportsResponseUi,
			types.SupportsError,
			SupportsErrorUi
		>({
			...props,
			method: client.supports,
			requestJsonSchema: supportsRequestJsonSchema,
			requestSchemaBase64: types.supportsRequestSchemaBase64,
			responseJsonSchema: supportsResponseJsonSchema,
			responseSchemaBase64: types.supportsResponseSchemaBase64,
			errorJsonSchema: supportsErrorJsonSchema,
			errorSchemaBase64: types.supportsErrorSchemaBase64,
		}),
	supportsPermit: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.SupportsPermitRequest,
			SupportsPermitRequestUi,
			types.SupportsPermitResponse,
			SupportsPermitResponseUi,
			types.SupportsPermitError,
			SupportsPermitErrorUi
		>({
			...props,
			method: client.supportsPermit,
			requestJsonSchema: supportsPermitRequestJsonSchema,
			requestSchemaBase64: types.supportsPermitRequestSchemaBase64,
			responseJsonSchema: supportsPermitResponseJsonSchema,
			responseSchemaBase64: types.supportsPermitResponseSchemaBase64,
			errorJsonSchema: supportsPermitErrorJsonSchema,
			errorSchemaBase64: types.supportsPermitErrorSchemaBase64,
		}),
	tokenMetadata: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.TokenMetadataRequest,
			TokenMetadataRequestUi,
			types.TokenMetadataResponse,
			TokenMetadataResponseUi,
			types.TokenMetadataError,
			TokenMetadataErrorUi
		>({
			...props,
			method: client.tokenMetadata,
			requestJsonSchema: tokenMetadataRequestJsonSchema,
			requestSchemaBase64: types.tokenMetadataRequestSchemaBase64,
			responseJsonSchema: tokenMetadataResponseJsonSchema,
			responseSchemaBase64: types.tokenMetadataResponseSchemaBase64,
			errorJsonSchema: tokenMetadataErrorJsonSchema,
			errorSchemaBase64: types.tokenMetadataErrorSchemaBase64,
		}),
	transfer: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.TransferRequest,
			TransferRequestUi,
			types.TransferError,
			TransferErrorUi
		>({
			...props,
			method: client.transfer,
			requestJsonSchema: transferRequestJsonSchema,
			requestSchemaBase64: types.transferRequestSchemaBase64,
			errorJsonSchema: transferErrorJsonSchema,
			errorSchemaBase64: types.transferErrorSchemaBase64,
		}),
	unblock: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.UnblockRequest,
			UnblockRequestUi,
			types.UnblockError,
			UnblockErrorUi
		>({
			...props,
			method: client.unblock,
			requestJsonSchema: unblockRequestJsonSchema,
			requestSchemaBase64: types.unblockRequestSchemaBase64,
			errorJsonSchema: unblockErrorJsonSchema,
			errorSchemaBase64: types.unblockErrorSchemaBase64,
		}),
	updateOperator: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.UpdateOperatorRequest,
			UpdateOperatorRequestUi,
			types.UpdateOperatorError,
			UpdateOperatorErrorUi
		>({
			...props,
			method: client.updateOperator,
			requestJsonSchema: updateOperatorRequestJsonSchema,
			requestSchemaBase64: types.updateOperatorRequestSchemaBase64,
			errorJsonSchema: updateOperatorErrorJsonSchema,
			errorSchemaBase64: types.updateOperatorErrorSchemaBase64,
		}),
	upgrade: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.UpgradeRequest,
			UpgradeRequestUi,
			types.UpgradeError,
			UpgradeErrorUi
		>({
			...props,
			method: client.upgrade,
			requestJsonSchema: upgradeRequestJsonSchema,
			requestSchemaBase64: types.upgradeRequestSchemaBase64,
			errorJsonSchema: upgradeErrorJsonSchema,
			errorSchemaBase64: types.upgradeErrorSchemaBase64,
		}),
	view: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			never,
			never,
			types.ViewResponse,
			ViewResponseUi,
			never,
			never
		>({
			...props,
			method: client.view,
			responseJsonSchema: viewResponseJsonSchema,
			responseSchemaBase64: types.viewResponseSchemaBase64,
		}),
	viewMessageHash: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.ViewMessageHashRequest,
			ViewMessageHashRequestUi,
			types.ViewMessageHashResponse,
			ViewMessageHashResponseUi,
			never,
			never
		>({
			...props,
			method: client.viewMessageHash,
			requestJsonSchema: viewMessageHashRequestJsonSchema,
			requestSchemaBase64: types.viewMessageHashRequestSchemaBase64,
			responseJsonSchema: viewMessageHashResponseJsonSchema,
			responseSchemaBase64: types.viewMessageHashResponseSchemaBase64,
		}),
	viewSupply: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			never,
			never,
			types.ViewSupplyResponse,
			ViewSupplyResponseUi,
			never,
			never
		>({
			...props,
			method: client.viewSupply,
			responseJsonSchema: viewSupplyResponseJsonSchema,
			responseSchemaBase64: types.viewSupplyResponseSchemaBase64,
		}),
};
